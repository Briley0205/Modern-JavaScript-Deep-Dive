## 📕 오늘 공부한 내용, 이렇게 정리해 봅시다. ✒

**TIL(Today I learn) 기록일** : 2022.07.30

**오늘 읽은 범위** : 15장 let, const 키워드와 블록 레벨 스코프

### var 단점

- 중복 선언이 허용되어 심각한 문제를 일으킬 수 있다.
- 오로지 함수의 코드 블록만을 지역스코프로 인정해서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역변수가 된다.
- TDZ로 선언 이전에 참조가 가능하다
---

이러한 단점을 보완하기 위해 let과 const가 존재한다.


### let 키워드 
#### 특징
    > 변수 중복 선언 금지
      - let 키워드로 이름이 같은 변수를 중복 선언하면 문법 에러가 발생한다.
    > 블록 레벨 스코프
      - let 키워드로 선언한 변수는 모든 코드 블록(함수, if문, for문, while 문, try/catch문 등)을 지역 스코프로 인정하는 블랙 레벨 스코프를 따른다
```js
let foo = 1; //전역 변수
{ 
  let foo = 2; // 지역 변수
  let bar = 3; // 지역 변수
}


console.log(foo); // 1
console.log(bar); // bar is not defined

```
> 변수 호이스팅

let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다.
let 키워드로 선언한 변수는 "선언 단계"와 "초기화 단계"가 분리되어 진행된다.
런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행된다.

- TDZ : 일시적 사각지대  ( let 키워드로 선언한 변수는 스코프의 시작 지점부터 초기화 단계 시작 지점까지 변수를 참조할 수 없다.)
```js
// 런타임 이전에 선언 단계가 실행된다. 아직 변수가 초기화되지 않았다.
// 초기화 이전의 일시적 사각지대에서는 변수를 참조할 수 없다.
console.log(foo); ReferenceError: foo is not defined

let foo; // 변수 선언문에서 초기화 단계가 실행된다.
console.log(foo); // undefined

foo = 1; // 할당문에서 할당 단계가 실행된다.

console.log(foo); // 1
```
자바스크립트는 ES6에서 도입된 let, const를 포함해서 모든 선언(var, let, const, function, function*, class 등)을 호이스팅한다.
> 단, ES6에서 도입된 let,const, class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작한다. 


### const 키워드

const 키워드는 상수를 선언하기 위해 사용한다. 

> 선언과 초기화
const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.

그렇지 않으면 다음과 같이 문법 에러가 발생한다.
;
```js
const foo; // syntaxError: Missing initializer in const declaration 
```

const 키워드로 선언한 변수는 let 키워드로 선언한 변수와 마찬가지로 블록 레벨 스코프를 가지며, 변수 호이스팅이 발생하지 않는 것처럼 동작한다. 

> 재할당 금지

var 또는 let 키워드로 선언한 변수는 재할당이 자유로우나 const 키워드로 선언한 변수는 재할당이 금지된다.

```js
const foo = 1;
foo = 2; // TypeError: Assignment to constant variable
```

>상수

const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없다.
일반적으로 상수의 이름은 대문자로 선언해 상수임을 명확히 나타낸다. (여러 단어로 이뤄진 경우에는 언더스코어(_)로 구분해서 스네이크 케이스로 표현하는 것이 일반적이다.)

```js
// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값이다.
// 변수 이름을 대문자로 선언해 상수임을 명확히 나타낸다.
const TAX_RATE = 0.1;

//세전 가격 
let preTaxPrice = 100;

// 세후 가격
let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);

console.log(afterTaxPrice); // 110

```


> const 키워드는 재할당을 금지할 뿐 "불변"을 의미하지 않는다
새로운 값을 재할당하는 것은 불가능 하지만 프로퍼티 동적 생성, 삭제, 프로퍼티 값의 변경을 통해 객체를 변경하는 것은 가능하다.
이때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.


